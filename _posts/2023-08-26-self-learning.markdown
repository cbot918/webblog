---
layout: post
title:  (分享) 如何自學前後端Web程式設計
date:   2023-08-26 23:11:00 +0800
image:  02.jpg
tags:   Resources
---

自己自學前後端程式大約超過兩年, 把自學過程記錄下來, 供剛開始走上工程師之路的新血有個可能的方向參考

## 解決問題
給不擅長程式自學的初階工程師朋友一個微參考方向

## 小提醒
1. 對2年以上的在職工程師可能不適用
2. 自己資工系雖然沒畢業, 開發經歷也只有兩年, 但之前擔任過10年的數學老師,且原本對寫程式很就很有興趣
3. 以上第二點做資訊揭露, 希望閱讀的朋友可以有足夠的資訊做判斷
4. 即使自己背景不算白紙, 但依然覺得以下分享對程式新手有幫助

## 筆者環境
1. Host OS: [Linux Ubuntu 20.04](https://ubuntu.com/download)
2. IDE: VScode
3. 語言: Golang / React

## 個人自學步驟

### 1. Project Clone時期
學寫程式最快的方法就是實作, 實作過之後就會有肌肉記憶, 跟著有經驗的工程師做過一遍, 也有機會學到Best Practice.
但還是很多小細節, 例如：提供影片教學的人可能自己經驗也不多甚至對內容理解也有誤, 提供教學的人程度很好, 但教學及知識整理不足.
所以在第一步, 其實就已經很需要思考, 如果想快速成長, 辨別適合自己的教學內容(某個角度也可以理解微優質教學內容), 其實是很重要的, 可以花一點時間邊練習, 邊訓練自己能夠辨別教學. 

一些注意的細節：
1. 真正意義上的跟著coding, 不能跳過自己做的階段, 直接使用教學的程式碼, 這樣會沒有效果
2. 如果一次挑戰大專案無法, 可以先從小一點的專案開始, 多做幾個
3. 筆者自己做過 2個MERN(上線當作品), 3個UI的
4. 最後要找一個自己喜歡的clone, 把他自己重寫一遍, 讓他變成自己的專案, 不然面試容易被問倒

在這一步的卡點通常可能有3個：
1. 聽不太懂英文. 
- 解決方式：可以找看看中國bilibili上面的project clone
2. 遇到BUG會卡住, 甚至無法解決就卡關了.
- 解決方式：如果不影響重要功能可以跳過, 或是到一些line社群請教前輩, 也可以花錢請家教幫忙解決
3. 跟著練習走走停停, 進度緩慢.
- 解決方式：此為正常現象, 調整自己心態, 可以做點筆記輔助加深印象.

### 2. Hello World時期
此時對程式會有一點點熟悉度, 開始知道一些關鍵字, 開始Hello World, 進入所謂的Hello World時期
因為有太多東西沒有摸過, 所以必須一個一個熟悉.

以筆者的例子Hello過哪些World:
1. React 
2. React Redux
3. Webpack
4. Node Express
5. Mongodb

以上只是最開始, 顯然佔後來的冰山一角, 但不斷Hello World才會一直進步, 如果一遍不熟, 就兩遍, 筆者 Webpack做了六七遍, 最後把他自己包成一個Repo自己用

這個步驟的觀念就是：勤能補拙, 什麼不會就練什麼, 一次不熟就多次

### 3. 面試期
因為有專案, 也有基本技能樹了, 這時候放到履歷上, 就可以開始投履歷了
邊面試做作業或補一些面試題, 充實自己的實力, 直到進入公司

### 4. 公司學習期
進入公司後, 還是很多東西不會, 就要一直補, 下班/假日可以都拿來充實自己, 讓自己在公司的專案表現更順利.
在這邊分享一個自己的看法, 很多人第一份會很在意薪水, 但個人認為薪水第二, 自己的成長第一.
再分享第二個比較特別的個人看法, 我在自己的工程師生涯有做了一件小事情, 就是把個人成長跟公司解藕, 意思就是要求自己即使在公司因為某些原因導致成長不快, 也要有一套方法讓自己的成長速度不能慢下來(也應證了為什麼我會分享自學這個題目)

### 4.5. 開發環境訓練期
這是自己比較特殊的一個方式, 特別訓練自己開發環境建制, 包括安裝套件, docker, VM, 部屬
因為自己發現常常要自學的時候, 卡在環境用很久, 或者是重複的環境重複做. 所以後來乾脆寫成shell script去做自動化.
我發現當我熟悉這一塊的時候, 之後遇到一些新的工具或專案想要練習, 可以快速模擬一個環境並成功執行, 經驗值成長就會特別快及順利.

### 5. 瓶頸期
這個時期不一定每個人都會有, 因為很多人可以順著公司專案, 平滑的讓能力往上升, 但自己也聽過一些工程師朋友分享遇到瓶頸.
個人遇到瓶頸之後的做法是, 補充基礎知識能力, 因為自己認為程式設計領域的知識, 還是理工科目, 就會有類似數學物理的特性, 就是掌握基本原理, 一些變化題就是透過推導之後可以觸類旁通. 所以筆者自己深入作業系統去做研究, 希望掌握了基本知識之後, 可以應付變化快速的前後端工具環境及觀念.
自己做過的事情包括
1. 手刻React render及基本hook (前端)
2. 手刻Redux (前端)
3. 試著自己寫寫看http模組 (後端)
4. 試著自己寫寫看net模組 (後端)
5. 試著自己寫寫看資料庫 (sqlite)
6. 念編譯器原理
7. 念作業系統原理

其中 1跟2對我幫助滿大, 因為掌握原理之後，一些變化就能根據原理去做類推
3 4 看個人有沒有興趣可以做研究, 個人覺得滿有幫助的
5 6 7 不會特別建議, 成本太高回報不一定夠(除非很有興趣)

### 6. 刷題期
不一定每個人都會有刷題期, 但自己覺得刷題是可以讓自己邏輯思考更敏捷, 對一些手刻類型的專案滿有幫助, 或是針對coding interview那這就是加薪的必要手段, 在此分享目前一些刷題小心得.
1. 刷題不在快而在理解
2. 參考 neetcode.io的網站
3. 找個自己喜歡的主題出發, 沿著主題延伸, 並把一些重要的資料結構知識補齊

自己是機緣巧合開始寫binary search tree相關題目, 所以去把BST的CRUD/search/order之類的也做練習, 發現使用了大量遞迴, 所以開始練遞迴, 尾遞迴, 改寫成loop, 後來發現跟DP有點類似, 所以開始練一下DP. 目前覺得這種方式還不錯, 因為著重在理解, 比較不會變成背題目.

### 7. 往下一步期
在這個時期, 會思考自己到底是什麼程度的工程師, 可以做什麼事情讓自己往下一個階層走, 可能會接觸別的語言, 可能會接觸開源專案, 可能會接觸技術社群, 也可能是在公司擔任更重要的位置, 也可能是到處面試跳槽加薪, 根據自己個性跟思考方式不同, 可能會有不同的答案. 但自己覺得很重要的一見事情是, 自己要有一套方法, 評估自己的成長, 當然體感是一個重要依據, 但也需要有一些產出(repo/blog/分享發表), 或一些跟其他工程師互動討論意見之類的事情, 總之就是自己要有一把尺, 衡量自己的成長. 因為當成長可以量化的時候, 那就可以去達成目標, 讓自己產生更強的動能往下前進, 或是在自己達不成目標的時候, 調整修改成合理的目標(為的都是更強的動能)

## 一些自學上注意的事情
1. 避免摸太難的東西挫折導致動力下降
2. 做專案是很有效的前進方式(記得放到github上)
3. 前端新手期學一個框架, 一個UI函式庫就好, 在深不在多
4. 前端新手學習不要糾結在哲學, 什麼好什麼不好都不重要, 滿足公司專案, 能動比較重要
5. 新手期不要花太多時間寫文章給別人看(需要大量時間美化), 但可以作筆記自己看, 珍惜練功的時間
6. 後端初期不要碰K8S, MicroService
7. 後端Docker算滿重要的, 但是會花費大量時間練習, 如果有遇到docker學習的困難, 歡迎Email聯繫我(yale918@gmail.com), 可以提供一些幫助
8. 後端要規劃學習的範圍, 這邊需要一點經驗, 如果覺得學到焦慮不知道怎麼辦, 也歡迎聯繫我可以一起討論
9. 後端部屬/CICD/網路等等, 斟酌學習就好, 可以專注在RESTFul CRUD上, 還有滿足公司需求的技術上
10. 後端適量刷題會有幫助, 但時間有限所以刷題有可能可以考慮Middle Level再做
11. 以上也只是個人見解, 還是要依據每個人不同個性時間及實際工作狀況, 斟酌參考

## 後記 1
其實關於自學, 上面才分享一些心得而已, 還是有滿多細節沒有分享到的, 但覺得每個人個性不同, 應該要依據自己的狀況去做調整改變, 所以也可以看成一個心得分享啦！
如果對於工程師如何自學成長有興趣的初階工程師朋友, 歡迎寄信給我yale@gmail.com加個工程師line群, 可以一起進步

## 後記 2
關於語言：
為什麼自己會選擇 React 以及Golang
React: 因為自己資工沒唸完, 但依然有些微一點點的程式概念, 對於有程式概念的人, React用對方式可以很快上手, 因此自己認為React是很適合新手入門的框架, 但Vue是漸進式框架, 也有另一種適合新手上手的方式, 所以選自己覺得可行的框架就可.

Golang: 一部份是前公司使用, 所以自己有熟悉感. 二來是Golang是編譯式語言, 可以做出可執行檔, 讓我在摸索作業系統環境的時候, 可以很容易自己做出小工具, 去做一些實驗/練習. 第三, Golang是工程師公認最好上手的語言之一, 跟Python差不多, 語言面好上手代表的意思是自學時可以在程式概念上快速摸索, 因為節省了一部分學習語言本身的時間. 但壞處是Golang不容易找初階工作, 這對初階工程師是一個很重要的參考依據, 一定要慎重考慮(不然對後端最明顯的答案是Java/C#或Php)

以上是各家會有各家看法的關於語言的部份, 語言選擇除了語言本身特性, 還需要依據自己要達成的目標, 使用的策略, 以及就業市場以及真正的可行性來去做綜合判斷, 上面只是提供個個人的經驗及想法參考. 